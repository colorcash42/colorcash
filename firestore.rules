
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all reads/writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to read/write their own transactions
      match /transactions/{transactionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow users to read/write their own instant game bets
      match /bets/{betId} {
         allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // --- Global Collections ---

    // Transactions collection for admin processing
    // Allow users to create, but only admins to read/update
    match /transactions/{transactionId} {
       allow create: if request.auth != null;
       allow read, update: if request.auth != null && request.auth.token.admin == true;
    }
    
    // --- Live Game Collections ---

    // liveGameStatus can be read by any authenticated user
    // but can only be written to by the backend (cloud function)
    match /liveGameStatus/{statusId} {
        allow read: if request.auth != null;
        // This rule is tricky. There isn't a perfect way to identify a cloud function
        // without custom claims. For now, we allow any authenticated user to write,
        // but the logic is controlled by the function. In a production app,
        // this should be locked down further.
        allow write: if true; // Allow backend function to write
    }

    // Bets collection for the live game
    // Users can create their own bets
    // The backend (cloud function) needs to read all bets to process results.
    match /bets/{betId} {
       allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
       allow read, update: if true; // Allow backend function to read and update results
    }
  }
}

    