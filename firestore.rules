rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Allow users to read/write their own data
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      // Allow creation of user doc
      allow create: if request.auth.uid == userId;
      
      // Allow users to manage their own subcollections
      match /{allPaths=**} {
         allow read, write: if request.auth.uid == userId;
      }
    }

    // Allow logged-in users to read the live game status
    match /liveGameStatus/current {
      allow read: if request.auth != null;
    }
    
    // --- Live Game Bets ---
    // Bets are stored in a root collection now.
    // Allow users to create their own bets.
    match /bets/{betId} {
        allow create: if request.auth.uid == request.resource.data.userId;
        // Only allow reading of own bets
        allow read: if request.auth.uid == resource.data.userId;
        // Functions will update the status, not users
        allow update: if false;
    }

    // --- Transactions (for admin) ---
    // Allow users to create their own global transaction docs
    match /transactions/{transactionId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      // Admins can read/update all transactions
      // To implement admin logic, you would typically use a custom claim.
      // For now, we allow any authenticated user to read (for simplicity, NOT for production)
      // A better approach is to use a cloud function to handle admin actions.
      // This rule assumes admin actions are handled by a trusted server/function.
      allow read: if request.auth != null; 
      allow update: if false; // Let cloud function handle updates.
    }
  }
}
