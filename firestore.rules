rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- User Data Rules ---
    // Users can only read/write their own data
    match /users/{userId} {
      allow read, update, write: if isAuthenticated() && isOwner(userId);
      // Allow user creation for new sign-ups
      allow create: if isAuthenticated();
      
      // Users can only read/write their own subcollections
      match /{allSubcollections}/{docId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // --- Live Game Rules ---

    // The 'current' status document can be read by any authenticated user
    match /liveGameStatus/current {
       allow get: if isAuthenticated();
       // IMPORTANT: Allow write only for backend functions, NOT clients.
       // This rule is implicitly handled by Firestore's server-side SDKs.
       // No explicit 'allow write' rule means clients cannot write.
    }
    
    // The 'bets' collection for the live game
    match /bets/{betId} {
        // Users can create their own bets
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        // Users can read their own bets
        allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
        // Bets can't be updated or deleted by clients once placed
        allow update, delete: if false;
    }

    // --- Transaction Rules ---
    // This collection is for admin review, so it's more locked down.
    match /transactions/{transactionId} {
      // Allow create for any authenticated user (they are creating a request)
      allow create: if isAuthenticated();
      
      // Disallow read/write for clients to prevent them from seeing others' requests
      // Admins will interact with this via a trusted backend/cloud function
      allow read, write, delete: if false; 
    }
  }
}
