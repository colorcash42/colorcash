rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the requesting user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can manage their own data, but not others'
    match /users/{userId} {
      allow read, update, write: if isSignedIn() && isOwner(userId);

      // Users can manage their own subcollections
      match /{allSubcollections}/{docId} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
    }
    
    // Global transactions can only be read by any signed in user
    // but only created/updated by the owner or an admin (server-side).
    // The server-side logic will handle permissions for approving/rejecting.
    match /transactions/{transactionId} {
        allow read, create: if isSignedIn();
        allow update: if false; // Must be updated by server-side admin logic
    }
    
    // --- Live Game Rules ---
    
    // Anyone can read the live game status to sync their client
    match /liveGameStatus/current {
      allow read: if isSignedIn();
      allow write: if false; // Only backend function can write here
    }
    
    // Bets can be created by authenticated users.
    // Reading/updating is handled by the backend function.
    match /bets/{betId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if false; // Only backend function can update a bet
    }
  }
}